{
  "openapi": "3.0.1",
  "info": {
    "title": "Rest API for AI Agents to interact with the Payman AI platform",
    "version": "2.0.0"
  },
  "externalDocs": {
    "description": "Payman AI Platform Documentation",
    "url": "https://docs.paymanai.com"
  },
  "servers": [
    {
      "url": "https://agent.payman.ai/api",
      "description": "Production server"
    },
    {
      "url": "https://agent-sandbox.payman.ai/api",
      "description": "Sandbox (Test Mode) server"
    }
  ],
  "security": [
    {
      "x-payman-api-secret": []
    }
  ],
  "paths": {
    "/payments/send-payment": {
      "post": {
        "tags": [
          "payments-controller"
        ],
        "summary": "Make a payment to a payment destination",
        "description": "Sends funds from an agent controlled wallet to a payment destination.",
        "operationId": "sendDirectPayment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The payment was successful.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/payments/destinations": {
      "post": {
        "tags": [
          "payments-controller"
        ],
        "summary": "Create a new payee",
        "description": "Create a new payee (aka payment destination) for future payments to be sent to",
        "operationId": "createPayee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaymanAgentPaymentDestinationDescriptor"
                  },
                  {
                    "$ref": "#/components/schemas/USACHPaymentDestinationDescriptor"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The payment was successful.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDestination"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/payments/deposit-link": {
      "post": {
        "tags": [
          "payments-controller"
        ],
        "summary": "Get a deposit link",
        "description": "Initiates the creation of a checkout link, through which a user can add funds to the agent's wallet.  For example this could be used to have your customer pay for some activity the agent is going to undertake on their behalf.  The returned JSON checkoutUrl property will contain a URL that the customer can visit to complete the payment.Funds received in this way will be comingled with the agent's other funds.  For a more segregated approach, consider using the Accounts API.",
        "operationId": "initiateDeposit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The link creation was successful.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/payments/send-payment": {
      "post": {
        "tags": [
          "customer-payments-controller"
        ],
        "summary": "Make a payment to a payment destination",
        "description": "Sends funds from an agent controlled wallet to a payment destination.",
        "operationId": "sendCustomerDirectPayment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerDirectPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The payment was successful.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/payments/destinations": {
      "get": {
        "tags": [
          "customer-payments-controller"
        ],
        "summary": "Search a customer's existing payees (or payment destinations) to make payments to",
        "description": "Searches a customer's existing payees for potential matches.  Additional confirmation from the user is required to verify the correct payment destination is selected.",
        "operationId": "searchPayees_1",
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "description": "The customer ID to search for payees for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The customer ID to search for payees for"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the payment destination to search for.  This can be a partial, case-insensitive match.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The name of the payment destination to search for.  This can be a partial, case-insensitive match."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of destination to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of destination to search for."
            }
          },
          {
            "name": "contactEmail",
            "in": "query",
            "description": "The contact email to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The contact email to search for."
            }
          },
          {
            "name": "contactPhoneNumber",
            "in": "query",
            "description": "The contact phone number to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The contact phone number to search for."
            }
          },
          {
            "name": "contactTaxId",
            "in": "query",
            "description": "The contact tax id to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The contact tax id to search for."
            }
          },
          {
            "name": "accountNumber",
            "in": "query",
            "description": "The US Bank account number to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The US Bank account number to search for."
            }
          },
          {
            "name": "routingNumber",
            "in": "query",
            "description": "The US Bank routing number to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The US Bank routing number to search for."
            }
          },
          {
            "name": "agentReference",
            "in": "query",
            "description": "The Payman agent reference (id or handle) to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The Payman agent reference (id or handle) to search for."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The search was successful and any matches returned.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentDestination"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customer-payments-controller"
        ],
        "summary": "Create a new payee on behalf of a specific customer",
        "description": "Create a new payee (aka payment destination) on behalf of a specific customer for future payments to be sent to.",
        "operationId": "createPayee_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CustomerPaymanAgentPaymentDestinationDescriptor"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerUSACHPaymentDestinationDescriptor"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The payment was successful.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentDestination"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/payments/deposit-link": {
      "post": {
        "tags": [
          "customer-payments-controller"
        ],
        "summary": "Get a deposit link for a specific customer",
        "description": "Initiates the creation of a checkout link, through which a customer can add funds to the their wallet.  The returned JSON checkoutUrl property will contain a URL that the customer can visit to complete the payment.Funds received in this way will only be available to the customer or an agent acting on their behalf.",
        "operationId": "initiateCustomerDeposit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerDepositRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The link creation was successful.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "version-controller"
        ],
        "operationId": "getVersionInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/spend-limits": {
      "get": {
        "tags": [
          "spend-limits-controller"
        ],
        "summary": "Get wallet spend limits of the current agent",
        "description": "Returns wallet spend limit details of the current agent",
        "operationId": "getCurrentAgentSpendLimits",
        "responses": {
          "200": {
            "description": "The request was successful and the agent wallet spend limits returned.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AgentWalletSpendLimitDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/payments/search-destinations": {
      "get": {
        "tags": [
          "payments-controller"
        ],
        "summary": "Search existing payee (or payment destinations) to make payments to",
        "description": "Searches existing payee for potential matches.  Additional confirmation from the user is required to verify the correct payment destination is selected.",
        "operationId": "searchPayees",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of the payment destination to search for.  This can be a partial, case-insensitive match.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The name of the payment destination to search for.  This can be a partial, case-insensitive match."
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of destination to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The type of destination to search for."
            }
          },
          {
            "name": "contactEmail",
            "in": "query",
            "description": "The contact email to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The contact email to search for."
            }
          },
          {
            "name": "contactPhoneNumber",
            "in": "query",
            "description": "The contact phone number to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The contact phone number to search for."
            }
          },
          {
            "name": "contactTaxId",
            "in": "query",
            "description": "The contact tax id to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The contact tax id to search for."
            }
          },
          {
            "name": "accountNumber",
            "in": "query",
            "description": "The US Bank account number to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The US Bank account number to search for."
            }
          },
          {
            "name": "routingNumber",
            "in": "query",
            "description": "The US Bank routing number to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The US Bank routing number to search for."
            }
          },
          {
            "name": "agentReference",
            "in": "query",
            "description": "The Payman agent reference (id or handle) to search for.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The Payman agent reference (id or handle) to search for."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The search was successful and any matches returned.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentDestination"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "me-controller"
        ],
        "summary": "Get details of the current agent",
        "description": "Returns identity details of the current agent",
        "operationId": "getCurrentAgent",
        "responses": {
          "200": {
            "description": "The request was successful and the agent details returned.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AgentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/description": {
      "get": {
        "tags": [
          "description-controller"
        ],
        "operationId": "getDescription",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIDescription"
                }
              }
            }
          }
        }
      }
    },
    "/balances/currencies/{currency}": {
      "get": {
        "tags": [
          "balance-controller"
        ],
        "summary": "Get current agent's spendable balance of a specific currency",
        "description": "Get the current agent's own spendable balance for a specific currency. A balance is considered spendable if it has been verified as having arrived in the Payman wallet and is reduced according to any  applicable spend limit controls. The balance will be returned in the  currency's full units (e.g. '1.00' is $1 in USD, '1.000000' is 1 USDC). ",
        "operationId": "getSpendableBalance",
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The balance for the currency",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/agents/{ref}": {
      "get": {
        "tags": [
          "agent-controller"
        ],
        "summary": "Get details of the agent id or handle matching the input 'ref'",
        "description": "Returns identity of the agent represented by the id or handle matching the input 'ref'",
        "operationId": "getAgentByHandle",
        "parameters": [
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the agent details returned.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AgentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/spend-limits": {
      "get": {
        "tags": [
          "customer-spend-limits-controller"
        ],
        "summary": "Get customer account's wallet spend limits for the current agent",
        "description": "Returns spend limit details for the current agent over the customer account's wallet",
        "operationId": "getCurrentAgentSpendLimits_1",
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "description": "The customer ID to get the wallet spend limits for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The customer ID to get the wallet spend limits for"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful and the wallet spend limits returned.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AgentWalletSpendLimitDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/balances/currencies/{currency}": {
      "get": {
        "tags": [
          "customer-balance-controller"
        ],
        "summary": "Get a customer account's spendable balance of a specific currency",
        "description": "Get a customer account's spendable balance for a specific currency. A balance is considered spendable if it has been verified as having arrived in the Payman wallet and is reduced according to any.  applicable spend limits. The balance will be returned in the  currency's full units (e.g. '1.00' is $1 in USD, '1.000000' is 1 USDC). ",
        "operationId": "getCustomerSpendableBalance",
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "The customer ID to get the balance for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The customer ID to get the balance for"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The balance for the currency",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/payments/destinations/{id}": {
      "delete": {
        "tags": [
          "payments-controller"
        ],
        "summary": "Delete a payee",
        "description": "Delete a payee (aka payment destination)",
        "operationId": "deletePayee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The payee was deleted.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/payments/destinations/{id}": {
      "delete": {
        "tags": [
          "customer-payments-controller"
        ],
        "summary": "Delete a payee on behalf of a specific customer",
        "description": "Delete a payee (aka payment destination) on behalf of a specific customer",
        "operationId": "deletePayee_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The payee was deleted.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "The HTTP status code for the error",
            "format": "int32"
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp when the error occurred",
            "format": "date-time"
          },
          "errorCode": {
            "type": "string",
            "description": "The Payman error code for the error"
          },
          "message": {
            "type": "string",
            "description": "The error message for the error",
            "readOnly": true
          }
        }
      },
      "DirectPaymentRequest": {
        "required": [
          "amountDecimal",
          "paymentDestinationId"
        ],
        "type": "object",
        "properties": {
          "walletId": {
            "type": "string",
            "description": "The ID of the specific wallet from which to send the funds.  This is only required if the agent has access to multiple wallets (not the case by default)."
          },
          "amountDecimal": {
            "type": "number",
            "description": "The amount to generate a checkout link for. For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          },
          "paymentDestinationId": {
            "type": "string",
            "description": "The id of the payment destination you want to send the funds to. This must have been created using the /payments/destinations endpoint or via the Payman dashboard before sending."
          },
          "memo": {
            "type": "string",
            "description": "A note or memo to associate with this payment."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "DirectPaymentResponse": {
        "required": [
          "reference",
          "status"
        ],
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "The Payman reference of the payment",
            "readOnly": true
          },
          "externalReference": {
            "type": "string",
            "description": "The external reference of the payment if applicable (e.g. a blockchain transaction hash)",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "The status of the payment",
            "readOnly": true,
            "enum": [
              "INITIATED",
              "AWAITING_APPROVAL",
              "REJECTED"
            ]
          }
        }
      },
      "IPaymentDestinationDescriptor": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "A payment destination to which to send funds",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "US_ACH": "#/components/schemas/USACHPaymentDestinationDescriptor",
            "PAYMAN_AGENT": "#/components/schemas/PaymanAgentPaymentDestinationDescriptor"
          }
        }
      },
      "PaymanAgentPaymentDestinationDescriptor": {
        "required": [
          "name",
          "paymanAgent",
          "type"
        ],
        "type": "object",
        "description": "A Payman Agent payment destination",
        "allOf": [
          {
            "$ref": "#/components/schemas/IPaymentDestinationDescriptor"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of payment destination",
                "enum": [
                  "PAYMAN_AGENT"
                ]
              },
              "paymanAgent": {
                "type": "string",
                "description": "The Payman handle or the id of the receiver agent"
              },
              "name": {
                "type": "string",
                "description": "The name you wish to associate with this payment destination for future lookups."
              },
              "tags": {
                "uniqueItems": true,
                "type": "array",
                "description": "Any additional labels you wish to assign to this payment destination",
                "items": {
                  "type": "string",
                  "description": "Any additional labels you wish to assign to this payment destination"
                }
              },
              "contactDetails": {
                "$ref": "#/components/schemas/PaymentDestinationContact"
              }
            }
          }
        ]
      },
      "PaymentDestinationContact": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of the payment destination contact"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the payment destination contact"
          },
          "address": {
            "type": "string",
            "description": "The address string of the payment destination contact"
          },
          "taxId": {
            "type": "string",
            "description": "The tax identification of the payment destination contact"
          }
        },
        "description": "Contact details for this payment destination"
      },
      "USACHPaymentDestinationDescriptor": {
        "required": [
          "accountHolderName",
          "accountHolderType",
          "accountNumber",
          "accountType",
          "name",
          "routingNumber",
          "type"
        ],
        "type": "object",
        "description": "A US ACH payment destination",
        "allOf": [
          {
            "$ref": "#/components/schemas/IPaymentDestinationDescriptor"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of payment destination",
                "enum": [
                  "US_ACH"
                ]
              },
              "accountType": {
                "type": "string",
                "description": "The type of account it is (checking or savings)"
              },
              "accountNumber": {
                "type": "string",
                "description": "The bank account number for the account"
              },
              "routingNumber": {
                "type": "string",
                "description": "The routing number of the bank"
              },
              "accountHolderName": {
                "type": "string",
                "description": "The name of the account holder"
              },
              "accountHolderType": {
                "type": "string",
                "description": "The type of the account holder",
                "enum": [
                  "individual",
                  "business"
                ]
              },
              "name": {
                "type": "string",
                "description": "The name you wish to associate with this payment destination for future lookups."
              },
              "tags": {
                "uniqueItems": true,
                "type": "array",
                "description": "Any additional labels you wish to assign to this payment destination",
                "items": {
                  "type": "string",
                  "description": "Any additional labels you wish to assign to this payment destination"
                }
              },
              "contactDetails": {
                "$ref": "#/components/schemas/PaymentDestinationContact"
              }
            }
          }
        ]
      },
      "PaymentDestination": {
        "required": [
          "name",
          "organizationId",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "readOnly": true
          },
          "updatedBy": {
            "type": "string",
            "readOnly": true
          },
          "providerInfo": {
            "type": "object",
            "additionalProperties": true
          },
          "name": {
            "type": "string",
            "description": "The user-assigned name of the payment destination"
          },
          "organizationId": {
            "type": "string"
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "Tags to help categorize the payment destination",
            "items": {
              "type": "string",
              "description": "Tags to help categorize the payment destination"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of payment destination",
            "enum": [
              "US_ACH",
              "PAYMAN_AGENT"
            ]
          },
          "destinationDetails": {
            "type": "object",
            "additionalProperties": true
          },
          "contactDetails": {
            "$ref": "#/components/schemas/PaymentDestinationContact"
          },
          "status": {
            "type": "string",
            "description": "The status of the payment destination",
            "enum": [
              "ACTIVE",
              "ARCHIVED",
              "DELETED"
            ]
          },
          "searchHashes": {
            "type": "object",
            "additionalProperties": true
          },
          "replacesId": {
            "type": "string",
            "description": "The ID of the payment method this entity replaces",
            "readOnly": true
          }
        }
      },
      "DepositRequest": {
        "required": [
          "amountDecimal"
        ],
        "type": "object",
        "properties": {
          "walletId": {
            "type": "string",
            "description": "The ID of the wallet you would like the customer to add funds to.  Only required if the agent has access to more than one wallet."
          },
          "amountDecimal": {
            "type": "number",
            "description": "The amount to generate a checkout link for. For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          },
          "memo": {
            "type": "string",
            "description": "A memo to associate with any transactions created in the Payman ledger."
          },
          "feeMode": {
            "type": "string",
            "description": "Determines whether to add any processing fees to the requested amount. If set to INCLUDED_IN_AMOUNT, the customer will be charged the exact amount specified, and fees will be deducted from that before the remainder is deposited in the wallet. If set to ADD_TO_AMOUNT, the customer will be charged the amount specified plus any fees required. Defaults to 'INCLUDED_IN_AMOUNT'.",
            "enum": [
              "INCLUDED_IN_AMOUNT",
              "ADD_TO_AMOUNT"
            ]
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "DepositResponse": {
        "required": [
          "checkoutUrl"
        ],
        "type": "object",
        "properties": {
          "checkoutUrl": {
            "type": "string",
            "description": "A URL that you can redirect the user to in order to complete the deposit."
          }
        }
      },
      "CustomerDirectPaymentRequest": {
        "required": [
          "amountDecimal",
          "customerId",
          "paymentDestinationId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "The ID of the customer to send the funds from."
          },
          "walletId": {
            "type": "string",
            "description": "The ID of the specific wallet from which to send the funds.  This is only required if the agent has access to multiple wallets (not the case by default)."
          },
          "amountDecimal": {
            "type": "number",
            "description": "The amount to generate a checkout link for. For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          },
          "paymentDestinationId": {
            "type": "string",
            "description": "The id of the payment destination you want to send the funds to. This must have been created using the /payments/destinations endpoint or via the Payman dashboard before sending."
          },
          "memo": {
            "type": "string",
            "description": "A note or memo to associate with this payment."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "CustomerPaymanAgentPaymentDestinationDescriptor": {
        "required": [
          "customerId",
          "name",
          "paymanAgent",
          "type"
        ],
        "type": "object",
        "description": "A Payman Agent payment destination",
        "allOf": [
          {
            "$ref": "#/components/schemas/ICustomerPaymentDestinationDescriptor"
          },
          {
            "type": "object",
            "properties": {
              "customerId": {
                "type": "string",
                "description": "The ID of the customer on whose behalf the payment destination is being created"
              },
              "type": {
                "type": "string",
                "description": "The type of payment destination",
                "enum": [
                  "PAYMAN_AGENT"
                ]
              },
              "paymanAgent": {
                "type": "string",
                "description": "The Payman handle or the id of the receiver agent"
              },
              "name": {
                "type": "string",
                "description": "The name you wish to associate with this payment destination for future lookups."
              },
              "tags": {
                "uniqueItems": true,
                "type": "array",
                "description": "Any additional labels you wish to assign to this payment destination",
                "items": {
                  "type": "string",
                  "description": "Any additional labels you wish to assign to this payment destination"
                }
              },
              "contactDetails": {
                "$ref": "#/components/schemas/PaymentDestinationContact"
              }
            }
          }
        ]
      },
      "CustomerUSACHPaymentDestinationDescriptor": {
        "required": [
          "accountHolderName",
          "accountHolderType",
          "accountNumber",
          "accountType",
          "customerId",
          "name",
          "routingNumber",
          "type"
        ],
        "type": "object",
        "description": "A US ACH payment destination",
        "allOf": [
          {
            "$ref": "#/components/schemas/ICustomerPaymentDestinationDescriptor"
          },
          {
            "type": "object",
            "properties": {
              "customerId": {
                "type": "string",
                "description": "The ID of the customer on whose behalf the payment destination is being created"
              },
              "type": {
                "type": "string",
                "description": "The type of payment destination",
                "enum": [
                  "US_ACH"
                ]
              },
              "accountType": {
                "type": "string",
                "description": "The type of account it is (checking or savings)"
              },
              "accountNumber": {
                "type": "string",
                "description": "The bank account number for the account"
              },
              "routingNumber": {
                "type": "string",
                "description": "The routing number of the bank"
              },
              "accountHolderName": {
                "type": "string",
                "description": "The name of the account holder"
              },
              "accountHolderType": {
                "type": "string",
                "description": "The type of the account holder",
                "enum": [
                  "individual",
                  "business"
                ]
              },
              "name": {
                "type": "string",
                "description": "The name you wish to associate with this payment destination for future lookups."
              },
              "tags": {
                "uniqueItems": true,
                "type": "array",
                "description": "Any additional labels you wish to assign to this payment destination",
                "items": {
                  "type": "string",
                  "description": "Any additional labels you wish to assign to this payment destination"
                }
              },
              "contactDetails": {
                "$ref": "#/components/schemas/PaymentDestinationContact"
              }
            }
          }
        ]
      },
      "ICustomerPaymentDestinationDescriptor": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "A payment destination to which to send funds on behalf of a customer",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "US_ACH": "#/components/schemas/CustomerUSACHPaymentDestinationDescriptor",
            "PAYMAN_AGENT": "#/components/schemas/CustomerPaymanAgentPaymentDestinationDescriptor"
          }
        }
      },
      "CustomerDepositRequest": {
        "required": [
          "amountDecimal",
          "customerId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "The ID of the customer to deposit the funds for."
          },
          "amountDecimal": {
            "type": "number",
            "description": "The amount to generate a checkout link for. For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          },
          "memo": {
            "type": "string",
            "description": "A memo to associate with any transactions created in the Payman ledger."
          },
          "feeMode": {
            "type": "string",
            "description": "Determines whether to add any processing fees to the requested amount. If set to INCLUDED_IN_AMOUNT, the customer will be charged the exact amount specified, and fees will be deducted from that before the remainder is deposited in the wallet. If set to ADD_TO_AMOUNT, the customer will be charged the amount specified plus any fees required. Defaults to 'INCLUDED_IN_AMOUNT'.",
            "enum": [
              "INCLUDED_IN_AMOUNT",
              "ADD_TO_AMOUNT"
            ]
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "AgentWalletSpendLimitDto": {
        "required": [
          "walletId"
        ],
        "type": "object",
        "properties": {
          "walletId": {
            "type": "string",
            "description": "The ID of the specific wallet over which the agents spend limits were requested.  If not requested in the input then this ID and the spend limits belong to agent's default wallet."
          },
          "maximumAmountPerTransaction": {
            "type": "number",
            "description": "The maximum allowed amount for a single transaction. Absence of the field indicates no such limit is applicable For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          },
          "maximumAmountSpendControlsPerDay": {
            "type": "number",
            "description": "The maximum total amount allowed for all transactions combined within a single day. Absence of the field indicates no such limit is applicable For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          },
          "maximumAmountSpendControlsPerWeek": {
            "type": "number",
            "description": "The maximum total amount allowed for all transactions combined within a single week. Absence of the field indicates no such limit is applicable For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          },
          "maximumAmountSpendControlsPerMonth": {
            "type": "number",
            "description": "The maximum total amount allowed for all transactions combined within a single month. Absence of the field indicates no such limit is applicable For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          },
          "maximumAmountSpendControlsLifeTime": {
            "type": "number",
            "description": "The maximum total amount allowed for all transactions combined in the entire lifespan. Absence of the field indicates no such limit is applicable For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          }
        }
      },
      "AgentDto": {
        "required": [
          "agentId",
          "handle",
          "name"
        ],
        "type": "object",
        "properties": {
          "agentId": {
            "type": "string",
            "description": "The unique Payman ID of the agent"
          },
          "handle": {
            "type": "string",
            "description": "The unique Payman handle associated with the agent"
          },
          "name": {
            "type": "string",
            "description": "Name assigned to the agent"
          },
          "description": {
            "type": "string",
            "description": "Description of the agent"
          }
        }
      },
      "APIDescription": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "openAPISpec": {
            "type": "object",
            "additionalProperties": true
          },
          "version": {
            "type": "string"
          }
        }
      },
      "OperationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "x-payman-api-secret": {
        "type": "apiKey",
        "name": "x-payman-api-secret",
        "in": "header"
      }
    }
  }
}