{
  "openapi": "3.0.1",
  "info": {
    "title": "Rest API for AI Agents to interact with the Payman AI platform",
    "version": "2.0.0"
  },
  "externalDocs": {
    "description": "Payman AI Platform Documentation",
    "url": "https://docs.paymanai.com"
  },
  "servers": [
    {
      "url": "https://agent.payman.ai/api",
      "description": "Production server"
    },
    {
      "url": "https://agent-sandbox.payman.ai/api",
      "description": "Sandbox (Test Mode) server"
    }
  ],
  "security": [{ "x-payman-api-secret": [] }],
  "paths": {
    "/payments/send-payment": {
      "post": {
        "tags": ["payments-controller"],
        "summary": "Make a payment to a payment destination",
        "description": "Sends funds from an agent controlled wallet to a payment destination.",
        "operationId": "sendDirectPayment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/DirectPaymentRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The payment was successful.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectPaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          }
        }
      }
    },
    "/payments/customer-deposit-link": {
      "post": {
        "tags": ["payments-controller"],
        "summary": "Get a customer deposit link",
        "description": "Initiates the creation of a checkout link, through which the customer can add funds to the agent's wallet.  For example this could be used to have your customer pay for some activity the agent is going to undertake on their behalf.  The returned JSON checkoutUrl property will contain a URL that the customer can visit to complete the payment.",
        "operationId": "initiateCustomerDeposit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerDepositRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The link creation was successful.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDepositResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          }
        }
      }
    },
    "/wallets/{id}": {
      "get": {
        "tags": ["wallet-controller"],
        "summary": "Get wallet",
        "description": "Get a wallet by ID",
        "operationId": "getWallet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The wallet specified by the ID",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/Wallet" }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request.  Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": ["version-controller"],
        "operationId": "getVersionInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": { "type": "object" }
                }
              }
            }
          }
        }
      }
    },
    "/balances/customers/{customerId}/currencies/{currency}": {
      "get": {
        "tags": ["balance-controller"],
        "summary": "Get a customer's spendable balance of a specific currency",
        "description": "Get a customer's spendable balance for a specific curreny. A balance is considered spendable if it is not reserved for open tasks and has been verified as having arrived in the Payman wallet. The balance will be returned in the  currency's full units (e.g. '1.000000' is 1 USDC). The customer ID provided can be either a Payman customer ID or the customer ID you provided when you first referenced the customer (e.g. when creating a checkout link or creating a task).",
        "operationId": "getCustomerSpendableBalance",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "currency",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The balance for the currency",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "type": "number" }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          }
        }
      }
    },
    "/balances/currencies/{currency}": {
      "get": {
        "tags": ["balance-controller"],
        "summary": "Get current agent's spendable balance of a specific currency",
        "description": "Get the current agent's own spendable balance for a specific curreny. A balance is considered spendable if it is not reserved for open tasks and has been verified as having arrived in the Payman wallet. The balance will be returned in the  currency's full units (e.g. '1.000000' is 1 USDC). ",
        "operationId": "getSpendableBalance",
        "parameters": [
          {
            "name": "currency",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The balance for the currency",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "type": "number" }
              }
            }
          },
          "400": {
            "description": "Bad Requesst - the request body or parameters are invalid.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "403": {
            "description": "Forbidden - the caller does not have sufficient permissions",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "404": {
            "description": "Not found - the requested entity does not exist",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          },
          "500": {
            "description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
            "content": {
              "application/vnd.payman.v1+json": {
                "schema": { "$ref": "#/components/schemas/APIError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "The HTTP status code for the error",
            "format": "int32"
          },
          "timestamp": {
            "type": "string",
            "description": "The timestamp when the error occurred",
            "format": "date-time"
          },
          "errorCode": {
            "type": "string",
            "description": "The Payman error code for the error"
          },
          "message": {
            "type": "string",
            "description": "The error message for the error",
            "readOnly": true
          }
        }
      },
      "DirectPaymentRequest": {
        "required": ["amountDecimal", "paymentDestinationId"],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "The ID of the customer on whose behalf you're transferring funds. This can be any unique ID as held within your system.  Providing this will limit the spendableamounts to what the customer has already deposited (unless ignoreCustomerSpendLimits is set to true)."
          },
          "customerEmail": {
            "type": "string",
            "description": "An email address to associate with this customer."
          },
          "customerName": {
            "type": "string",
            "description": "A name to associate with this customer."
          },
          "ignoreCustomerSpendLimits": {
            "type": "boolean",
            "description": "By default Payman will limit spending on behalf of a customer to the amount they have deposited. If you wish to ignore this limit, set this to true. "
          },
          "walletId": {
            "type": "string",
            "description": "The ID of the specific wallet from which to send the funds.  This can be any unique ID as held within your system."
          },
          "amountDecimal": {
            "type": "number",
            "description": "The amount to generate a checkout link for. For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          },
          "paymentDestinationId": {
            "type": "string",
            "description": "The id of the payment destination you want to send the funds to. This must have been created using the /payments/destinations endpoint or via the Payman dashboard before sending."
          },
          "memo": {
            "type": "string",
            "description": "A note or memo to associate with this payment."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "title": "Metadata",
              "type": "string",
              "description": "Agent provided metadata related to this payment.  You may use this to store correlation data.When a task related url is sent to any registered webhook, this metadata will be included"
            },
            "description": "Agent provided metadata related to this payment.  You may use this to store correlation data.When a task related url is sent to any registered webhook, this metadata will be included"
          }
        }
      },
      "DirectPaymentResponse": {
        "required": ["reference"],
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "The Payman reference of the payment",
            "readOnly": true
          },
          "externalReference": {
            "type": "string",
            "description": "The external reference of the payment if applicable (e.g. a blockchain transaction hash)",
            "readOnly": true
          }
        }
      },
      "CustomerDepositRequest": {
        "required": ["amountDecimal", "customerId"],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "The ID of the customer to deposit funds for.  This can be any unique ID as held within your system."
          },
          "customerEmail": {
            "type": "string",
            "description": "An email address to associate with this customer."
          },
          "customerName": {
            "type": "string",
            "description": "A name to associate with this customer."
          },
          "walletId": {
            "type": "string",
            "description": "The ID of the wallet you would like the customer to add funds to.  Only required if the agent has access to more than one wallet."
          },
          "amountDecimal": {
            "type": "number",
            "description": "The amount to generate a checkout link for. For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
          },
          "memo": {
            "type": "string",
            "description": "A memo to associate with any transactions created in the Payman ledger."
          },
          "feeMode": {
            "type": "string",
            "description": "Determines whether to add any processing fees to the requested amount. If set to INCLUDED_IN_AMOUNT, the customer will be charged the exact amount specified, and fees will be deducted from that before the remainder is deposited in the wallet. If set to ADD_TO_AMOUNT, the customer will be charged the amount specified plus any fees required. Defaults to 'INCLUDED_IN_AMOUNT'.",
            "enum": ["INCLUDED_IN_AMOUNT", "ADD_TO_AMOUNT"]
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "title": "Metadata",
              "type": "string",
              "description": "Agent provided metadata related to this deposit.  You may use this to store correlation data.When a task related url is sent to any registered webhook, this metadata will be included"
            },
            "description": "Agent provided metadata related to this deposit.  You may use this to store correlation data.When a task related url is sent to any registered webhook, this metadata will be included"
          }
        }
      },
      "CustomerDepositResponse": {
        "required": ["checkoutUrl"],
        "type": "object",
        "properties": {
          "checkoutUrl": {
            "type": "string",
            "description": "A URL that you can redirect the user to in order to complete the deposit."
          }
        }
      },
      "Currency": {
        "title": "Currency",
        "required": ["name", "symbol", "type"],
        "type": "object",
        "properties": {
          "code": {
            "title": "Currency Code",
            "type": "string",
            "description": "The unique short code for this currency",
            "readOnly": true,
            "example": "USD"
          },
          "symbol": {
            "title": "Currency Symbol",
            "type": "string",
            "description": "The currency symbol to use",
            "example": "$"
          },
          "name": {
            "title": "Currency Name",
            "type": "string",
            "description": "The name of this currency",
            "example": "US Dollars"
          },
          "decimalPlaces": {
            "title": "Decimal Places",
            "minimum": 0,
            "type": "integer",
            "description": "The number of decimal places this currency supports.",
            "format": "int32"
          },
          "type": {
            "title": "Currency Type",
            "type": "string",
            "enum": ["CRYPTOCURRENCY", "FIAT"]
          },
          "value": {
            "title": "Value",
            "type": "string",
            "description": "The value of the item",
            "readOnly": true
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A longer form description of the item",
            "readOnly": true
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "A descriptive label of the item",
            "readOnly": true
          }
        },
        "description": "The currency this wallet is denominated in."
      },
      "Wallet": {
        "required": [
          "balanceInEscrow",
          "currency",
          "spendableBalance",
          "unconfirmedBalance"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string", "readOnly": true },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "A descriptive name for this wallet",
            "example": "My Personal Wallet"
          },
          "currency": { "$ref": "#/components/schemas/Currency" },
          "spendableBalance": {
            "title": "Spendable Balance",
            "type": "integer",
            "description": "The amount of currency that can be spent from this wallet."
          },
          "balanceInEscrow": {
            "title": "Balance in Escrow",
            "type": "integer",
            "description": "The amount of currency that is currently held in escrow against created tasks."
          },
          "unconfirmedBalance": {
            "title": "Unconfirmed Balance",
            "type": "integer",
            "description": "The amount of currency that is currently unconfirmed (e.g. incomplete deposits)."
          },
          "notes": {
            "title": "Notes",
            "type": "string",
            "description": "Any additional notes or information about this wallet."
          },
          "totalBalance": {
            "title": "Total Balance",
            "type": "integer",
            "description": "The total balance of this wallet, including spendable balance, balance in escrow, and unconfirmed balance.",
            "readOnly": true
          }
        }
      }
    },
    "securitySchemes": {
      "x-payman-api-secret": {
        "type": "apiKey",
        "name": "x-payman-api-secret",
        "in": "header"
      }
    }
  }
}
