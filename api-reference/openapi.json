{
	"openapi": "3.0.1",
	"info": {
		"title": "Rest API for AI Agents to interact with the Payman AI platform",
		"version": "2.0.0"
	},
	"externalDocs": {
		"description": "Payman AI Platform Documentation",
		"url": "https://docs.paymanai.com"
	},
	"servers": [
		{
			"url": "https://agent.payman.ai/api",
			"description": "Payman API server"
		}
	],
	"security": [
		{
			"x-payman-api-secret": []
		}
	],
	"paths": {
		"/payments/send-payment": {
			"post": {
				"tags": ["payments-controller"],
				"summary": "Make a payment to a payee",
				"description": "Sends funds from an agent controlled wallet to a payee.",
				"operationId": "sendDirectPayment",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DirectPaymentRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "The payment was successful.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/DirectPaymentResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Requesst - the request body or parameters are invalid.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - the caller does not have sufficient permissions",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"404": {
						"description": "Not found - the requested entity does not exist",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					}
				}
			}
		},
		"/payments/payees": {
			"post": {
				"tags": ["payments-controller"],
				"summary": "Create a new payee",
				"description": "Create a new payee (aka payee) for future payments to be sent to",
				"operationId": "createPayee",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"oneOf": [
									{
										"$ref": "#/components/schemas/CryptoAddressPayeeDescriptor"
									},
									{
										"$ref": "#/components/schemas/PaymanWalletPayeeDescriptor"
									},
									{
										"$ref": "#/components/schemas/TSDPayeeDescriptor"
									},
									{
										"$ref": "#/components/schemas/USACHPayeeDescriptor"
									}
								]
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "The payment was successful.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/Payee"
								}
							}
						}
					},
					"400": {
						"description": "Bad Requesst - the request body or parameters are invalid.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - the caller does not have sufficient permissions",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"404": {
						"description": "Not found - the requested entity does not exist",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					}
				}
			}
		},
		"/version": {
			"get": {
				"tags": ["version-controller"],
				"operationId": "getVersionInfo",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"*/*": {
								"schema": {
									"type": "object",
									"additionalProperties": true
								}
							}
						}
					}
				}
			}
		},
		"/spend-limits": {
			"get": {
				"tags": ["spend-limits-controller"],
				"summary": "Get wallet spend limits of the current agent",
				"description": "Returns wallet spend limit details of the current agent",
				"operationId": "getCurrentAgentSpendLimits",
				"responses": {
					"200": {
						"description": "The request was successful and the agent wallet spend limits returned.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/AgentWalletSpendLimitDto"
								}
							}
						}
					},
					"400": {
						"description": "Bad Requesst - the request body or parameters are invalid.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - the caller does not have sufficient permissions",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"404": {
						"description": "Not found - the requested entity does not exist",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					}
				}
			}
		},
		"/payments/search-payees": {
			"get": {
				"tags": ["payments-controller"],
				"summary": "Search existing payee to make payments to",
				"description": "Searches existing payee for potential matches.  Additional confirmation from the user is required to verify the correct payee is selected.",
				"operationId": "searchPayees",
				"parameters": [
					{
						"name": "name",
						"in": "query",
						"description": "The name of the payee to search for.  This can be a partial, case-insensitive match.",
						"required": false,
						"schema": {
							"type": "string",
							"description": "The name of the payee to search for.  This can be a partial, case-insensitive match."
						}
					},
					{
						"name": "contactEmail",
						"in": "query",
						"description": "The contact email to search for.",
						"required": false,
						"schema": {
							"type": "string",
							"description": "The contact email to search for."
						}
					},
					{
						"name": "contactPhoneNumber",
						"in": "query",
						"description": "The contact phone number to search for.",
						"required": false,
						"schema": {
							"type": "string",
							"description": "The contact phone number to search for."
						}
					},
					{
						"name": "contactTaxId",
						"in": "query",
						"description": "The contact tax id to search for.",
						"required": false,
						"schema": {
							"type": "string",
							"description": "The contact tax id to search for."
						}
					},
					{
						"name": "accountNumber",
						"in": "query",
						"description": "The US Bank account number to search for.",
						"required": false,
						"schema": {
							"type": "string",
							"description": "The US Bank account number to search for."
						}
					},
					{
						"name": "routingNumber",
						"in": "query",
						"description": "The US Bank routing number to search for.",
						"required": false,
						"schema": {
							"type": "string",
							"description": "The US Bank routing number to search for."
						}
					},
					{
						"name": "agentReference",
						"in": "query",
						"description": "The Payman agent reference (id or handle) to search for.",
						"required": false,
						"schema": {
							"type": "string",
							"description": "The Payman agent reference (id or handle) to search for."
						}
					},
					{
						"name": "cryptoAddress",
						"in": "query",
						"description": "The crypto address to search for.",
						"required": false,
						"schema": {
							"type": "string",
							"description": "The crypto address to search for."
						}
					},
					{
						"name": "cryptoCurrency",
						"in": "query",
						"description": "The crypto currency to search for.",
						"required": false,
						"schema": {
							"type": "string",
							"description": "The crypto currency to search for."
						}
					},
					{
						"name": "cryptoChain",
						"in": "query",
						"description": "The crypto chain to search for.",
						"required": false,
						"schema": {
							"type": "string",
							"description": "The crypto chain to search for."
						}
					}
				],
				"responses": {
					"200": {
						"description": "The search was successful and any matches returned.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Payee"
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Requesst - the request body or parameters are invalid.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - the caller does not have sufficient permissions",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"404": {
						"description": "Not found - the requested entity does not exist",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					}
				}
			}
		},
		"/me": {
			"get": {
				"tags": ["me-controller"],
				"summary": "Get details of the current agent",
				"description": "Returns identity details of the current agent",
				"operationId": "getCurrentAgent",
				"responses": {
					"200": {
						"description": "The request was successful and the agent details returned.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/AgentDto"
								}
							}
						}
					},
					"400": {
						"description": "Bad Requesst - the request body or parameters are invalid.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - the caller does not have sufficient permissions",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"404": {
						"description": "Not found - the requested entity does not exist",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					}
				}
			}
		},
		"/description": {
			"get": {
				"tags": ["description-controller"],
				"operationId": "getDescription",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIDescription"
								}
							}
						}
					}
				}
			}
		},
		"/balances/currencies/{currency}": {
			"get": {
				"tags": ["balance-controller"],
				"summary": "Get current agent's spendable balance of a specific currency",
				"description": "Get the current agent's own spendable balance for a specific currency. A balance is considered spendable if it has been verified as having arrived in the Payman wallet and is reduced according to any  applicable spend limit controls. The balance will be returned in the  currency's full units (e.g. '1.00' is $1 in USD, '1.000000' is 1 USDC). ",
				"operationId": "getSpendableBalance",
				"parameters": [
					{
						"name": "currency",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The balance for the currency",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"type": "number"
								}
							}
						}
					},
					"400": {
						"description": "Bad Requesst - the request body or parameters are invalid.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - the caller does not have sufficient permissions",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"404": {
						"description": "Not found - the requested entity does not exist",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					}
				}
			}
		},
		"/agents/{ref}": {
			"get": {
				"tags": ["agent-controller"],
				"summary": "Get details of the agent id or handle matching the input 'ref'",
				"description": "Returns identity of the agent represented by the id or handle matching the input 'ref'",
				"operationId": "getAgentByHandle",
				"parameters": [
					{
						"name": "ref",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful and the agent details returned.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/AgentDto"
								}
							}
						}
					},
					"400": {
						"description": "Bad Requesst - the request body or parameters are invalid.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - the caller does not have sufficient permissions",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"404": {
						"description": "Not found - the requested entity does not exist",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
						"content": {
							"*/*": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					}
				}
			}
		},
		"/payments/payees/{id}": {
			"delete": {
				"tags": ["payments-controller"],
				"summary": "Delete a payee",
				"description": "Delete a payee (aka payee)",
				"operationId": "deletePayee",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The payee was deleted.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/OperationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Requesst - the request body or parameters are invalid.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - the caller is not authenticated.  Please check the API key and Agent ID headers.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"403": {
						"description": "Forbidden - the caller does not have sufficient permissions",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"404": {
						"description": "Not found - the requested entity does not exist",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error - an unknown error occurred while processing the request. Please try again or contact support.",
						"content": {
							"application/vnd.payman.v1+json": {
								"schema": {
									"$ref": "#/components/schemas/APIError"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"APIError": {
				"type": "object",
				"properties": {
					"status": {
						"type": "integer",
						"description": "The HTTP status code for the error",
						"format": "int32"
					},
					"timestamp": {
						"type": "string",
						"description": "The timestamp when the error occurred",
						"format": "date-time"
					},
					"errorCode": {
						"type": "string",
						"description": "The Payman error code for the error"
					},
					"message": {
						"type": "string",
						"description": "The error message for the error",
						"readOnly": true
					}
				}
			},
			"DirectPaymentRequest": {
				"required": ["amountDecimal", "payeeId"],
				"type": "object",
				"properties": {
					"walletId": {
						"type": "string",
						"description": "The ID of the specific wallet from which to send the funds.  This is only required if the agent has access to multiple wallets (not the case by default)."
					},
					"amountDecimal": {
						"type": "number",
						"description": "The amount to generate a checkout link for. For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
					},
					"payeeId": {
						"type": "string",
						"description": "The id of the payee you want to send the funds to. This must have been created using the /payments/payees endpoint or via the Payman dashboard before sending."
					},
					"memo": {
						"type": "string",
						"description": "A note or memo to associate with this payment."
					},
					"metadata": {
						"type": "object",
						"additionalProperties": true
					}
				}
			},
			"DirectPaymentResponse": {
				"required": ["reference", "status"],
				"type": "object",
				"properties": {
					"reference": {
						"type": "string",
						"description": "The Payman reference of the payment",
						"readOnly": true
					},
					"externalReference": {
						"type": "string",
						"description": "The external reference of the payment if applicable (e.g. a blockchain transaction hash)",
						"readOnly": true
					},
					"status": {
						"type": "string",
						"description": "The status of the payment",
						"readOnly": true,
						"enum": ["INITIATED", "AWAITING_APPROVAL", "REJECTED"]
					}
				}
			},
			"Address": {
				"type": "object",
				"properties": {
					"addressLine1": {
						"type": "string"
					},
					"addressLine2": {
						"type": "string"
					},
					"addressLine3": {
						"type": "string"
					},
					"addressLine4": {
						"type": "string"
					},
					"locality": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"postcode": {
						"type": "string"
					},
					"country": {
						"type": "string"
					}
				},
				"description": "The address string of the payee contact.  IMPORTANTIf you are paying someone from a USDC wallet by ACH (US_ACH payee type), you are required to provide an address"
			},
			"CryptoAddressPayeeDescriptor": {
				"required": ["address", "chain", "currency", "name", "type"],
				"type": "object",
				"description": "A cryptocurrency address-based payee",
				"allOf": [
					{
						"$ref": "#/components/schemas/IPayeeDescriptor"
					},
					{
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"description": "The type of payee",
								"enum": ["CRYPTO_ADDRESS"]
							},
							"address": {
								"type": "string",
								"description": "The cryptocurrency address to send funds to"
							},
							"chain": {
								"type": "string",
								"description": "The the blockchain to use for the transaction"
							},
							"currency": {
								"type": "string",
								"description": "The the currency/token to use for the transaction"
							},
							"name": {
								"type": "string",
								"description": "The name you wish to associate with this payee for future lookups."
							},
							"tags": {
								"uniqueItems": true,
								"type": "array",
								"description": "Any additional labels you wish to assign to this payee",
								"items": {
									"type": "string",
									"description": "Any additional labels you wish to assign to this payee"
								}
							},
							"contactDetails": {
								"$ref": "#/components/schemas/PayeeContactDetails"
							}
						}
					}
				]
			},
			"IPayeeDescriptor": {
				"required": ["type"],
				"type": "object",
				"properties": {
					"type": {
						"type": "string"
					}
				},
				"description": "A payee to which to send funds",
				"discriminator": {
					"propertyName": "type",
					"mapping": {
						"US_ACH": "#/components/schemas/USACHPayeeDescriptor",
						"CRYPTO_ADDRESS": "#/components/schemas/CryptoAddressPayeeDescriptor",
						"PAYMAN_WALLET": "#/components/schemas/PaymanWalletPayeeDescriptor"
					}
				}
			},
			"PayeeContactDetails": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"description": "The email address of the payee contact"
					},
					"phoneNumber": {
						"type": "string",
						"description": "The phone number of the payee contact"
					},
					"address": {
						"$ref": "#/components/schemas/Address"
					},
					"taxId": {
						"type": "string",
						"description": "The tax identification of the payee contact"
					}
				},
				"description": "Contact details for this payee"
			},
			"PaymanWalletPayeeDescriptor": {
				"required": ["name", "paymanWallet", "type"],
				"type": "object",
				"description": "A Payman Wallet payee",
				"allOf": [
					{
						"$ref": "#/components/schemas/IPayeeDescriptor"
					},
					{
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"description": "The type of payee",
								"enum": ["PAYMAN_WALLET"]
							},
							"paymanWallet": {
								"type": "string",
								"description": "The Payman handle or the id of the receiver wallet"
							},
							"name": {
								"type": "string",
								"description": "The name you wish to associate with this payee for future lookups."
							},
							"tags": {
								"uniqueItems": true,
								"type": "array",
								"description": "Any additional labels you wish to assign to this payee",
								"items": {
									"type": "string",
									"description": "Any additional labels you wish to assign to this payee"
								}
							},
							"contactDetails": {
								"$ref": "#/components/schemas/PayeeContactDetails"
							}
						}
					}
				]
			},
			"TSDPayeeDescriptor": {
				"required": ["name", "type"],
				"type": "object",
				"description": "A Test Dollar payee",
				"allOf": [
					{
						"$ref": "#/components/schemas/IPayeeDescriptor"
					},
					{
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"description": "The type of payee",
								"enum": ["TEST_RAILS"]
							},
							"name": {
								"type": "string",
								"description": "The name you wish to associate with this payee for future lookups."
							},
							"tags": {
								"uniqueItems": true,
								"type": "array",
								"description": "Any additional labels you wish to assign to this payee",
								"items": {
									"type": "string",
									"description": "Any additional labels you wish to assign to this payee"
								}
							}
						}
					}
				]
			},
			"USACHPayeeDescriptor": {
				"required": [
					"accountHolderName",
					"accountHolderType",
					"accountNumber",
					"accountType",
					"name",
					"routingNumber",
					"type"
				],
				"type": "object",
				"description": "A US ACH payee",
				"allOf": [
					{
						"$ref": "#/components/schemas/IPayeeDescriptor"
					},
					{
						"type": "object",
						"properties": {
							"type": {
								"type": "string",
								"description": "The type of payee",
								"enum": ["US_ACH"]
							},
							"accountType": {
								"type": "string",
								"description": "The type of account it is (checking or savings)"
							},
							"accountNumber": {
								"type": "string",
								"description": "The bank account number for the account"
							},
							"routingNumber": {
								"type": "string",
								"description": "The routing number of the bank"
							},
							"accountHolderName": {
								"type": "string",
								"description": "The name of the account holder"
							},
							"accountHolderType": {
								"type": "string",
								"description": "The type of the account holder",
								"enum": ["individual", "business"]
							},
							"name": {
								"type": "string",
								"description": "The name you wish to associate with this payee for future lookups."
							},
							"tags": {
								"uniqueItems": true,
								"type": "array",
								"description": "Any additional labels you wish to assign to this payee",
								"items": {
									"type": "string",
									"description": "Any additional labels you wish to assign to this payee"
								}
							},
							"contactDetails": {
								"$ref": "#/components/schemas/PayeeContactDetails"
							}
						}
					}
				]
			},
			"Payee": {
				"required": ["name", "organizationId", "type"],
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"readOnly": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					},
					"createdBy": {
						"type": "string",
						"readOnly": true
					},
					"updatedBy": {
						"type": "string",
						"readOnly": true
					},
					"providerInfo": {
						"type": "object",
						"additionalProperties": true
					},
					"name": {
						"type": "string",
						"description": "The user-assigned name of the payee"
					},
					"organizationId": {
						"type": "string"
					},
					"tags": {
						"uniqueItems": true,
						"type": "array",
						"description": "Tags to help categorize the payee",
						"items": {
							"type": "string",
							"description": "Tags to help categorize the payee"
						}
					},
					"type": {
						"type": "string",
						"description": "The type of payee",
						"enum": [
							"US_ACH",
							"CRYPTO_ADDRESS",
							"PAYMAN_WALLET",
							"TEST_RAILS"
						]
					},
					"payeeDetails": {
						"type": "object",
						"additionalProperties": true
					},
					"contactDetails": {
						"$ref": "#/components/schemas/PayeeContactDetails"
					},
					"status": {
						"type": "string",
						"description": "The status of the payee",
						"enum": ["ACTIVE", "ARCHIVED", "DELETED"]
					},
					"searchHashes": {
						"type": "object",
						"additionalProperties": true
					},
					"replacesId": {
						"type": "string",
						"description": "The ID of the payee this entity replaces",
						"readOnly": true
					}
				}
			},
			"AgentWalletSpendLimitDto": {
				"required": ["walletId"],
				"type": "object",
				"properties": {
					"walletId": {
						"type": "string",
						"description": "The ID of the specific wallet over which the agents spend limits were requested.  If not requested in the input then this ID and the spend limits belong to agent's default wallet."
					},
					"maximumAmountPerTransaction": {
						"type": "string",
						"description": "The maximum allowed amount for a single transaction. Absence of the field indicates no such limit is applicable For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
					},
					"maximumAmountSpendControlsPerDay": {
						"type": "string",
						"description": "The maximum total amount allowed for all transactions combined within a single day. Absence of the field indicates no such limit is applicable For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
					},
					"maximumAmountSpendControlsPerMonth": {
						"type": "string",
						"description": "The maximum total amount allowed for all transactions combined within a single month. Absence of the field indicates no such limit is applicable For example, '10.00' for USD is $10.00 or '1.000000' USDCBASE is 1 USDC."
					}
				}
			},
			"AgentDto": {
				"required": ["agentId", "handle", "name"],
				"type": "object",
				"properties": {
					"agentId": {
						"type": "string",
						"description": "The unique Payman ID of the agent"
					},
					"handle": {
						"type": "string",
						"description": "The unique Payman handle associated with the agent"
					},
					"name": {
						"type": "string",
						"description": "Name assigned to the agent"
					},
					"description": {
						"type": "string",
						"description": "Description of the agent"
					}
				}
			},
			"APIDescription": {
				"type": "object",
				"properties": {
					"description": {
						"type": "string"
					},
					"openAPISpec": {
						"type": "object",
						"additionalProperties": true
					},
					"version": {
						"type": "string"
					}
				}
			},
			"OperationResponse": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					}
				}
			}
		},
		"securitySchemes": {
			"x-payman-api-secret": {
				"type": "apiKey",
				"name": "x-payman-api-secret",
				"in": "header"
			}
		}
	}
}
